const { EmbedBuilder } = require('discord.js');
const playerManager = require('../systems/player.js');
const expCalculator = require('../systems/exp-calculator.js');
const cooldownManager = require('../utils/cooldown.js');
const SpiritStonesCalculator = require('../utils/spirit-stones-calculator.js');

module.exports = {
  name: 'meditate',
  aliases: ['m', 'thien', 'meditation'],
  description: 'Thi·ªÅn ƒë·ªãnh tu luy·ªán ƒë·ªÉ tƒÉng tu vi',
  cooldown: 3600000, // 1h = 3600000ms

  async execute(interaction, args) {
    const userId = interaction.user.id;
    const username = interaction.user.username;

    // Ki·ªÉm tra xem user ƒë√£ b·∫Øt ƒë·∫ßu game ch∆∞a
    if (!playerManager.hasStartedGame(userId)) {
      const notStartedEmbed = playerManager.createNotStartedEmbed();
      await interaction.reply({ embeds: [notStartedEmbed] });
      return;
    }

    const player = playerManager.getPlayer(userId);
    const now = Date.now();

    // Ki·ªÉm tra cooldown s·ª≠ d·ª•ng common manager
    const cooldownCheck = cooldownManager.checkCooldown(player, 'meditate', this.cooldown);
    if (cooldownCheck.isOnCooldown) {
      const cooldownEmbed = cooldownManager.createCooldownEmbed('meditate', cooldownCheck.remainingText);
      await interaction.reply({ embeds: [cooldownEmbed] });
      return;
    }

    // T√≠nh to√°n EXP theo h·ªá th·ªëng m·ªõi
    const expResult = expCalculator.calculateMeditateExp(player, 'none');
    const expGained = expResult.finalExp;

    // T√≠nh to√°n ph·∫ßn th∆∞·ªüng kh√°c
    const spiritStones = SpiritStonesCalculator.calculateMeditate();

    // C·∫≠p nh·∫≠t player
    playerManager.addExperience(userId, expGained);

    // C·∫≠p nh·∫≠t linh th·∫°ch theo format m·ªõi
    SpiritStonesCalculator.updatePlayerSpiritStones(player, spiritStones);

    // C·∫≠p nh·∫≠t th·ªùi gian thi·ªÅn ƒë·ªãnh cu·ªëi
    const lastCommandField = cooldownManager.getLastCommandField('meditate');
    const updateData = {
      [lastCommandField]: now,
      ...SpiritStonesCalculator.createUpdateObject(spiritStones)
    };
    playerManager.updatePlayer(userId, updateData);

    // T·∫°o embed th√¥ng b√°o th√†nh c√¥ng
    const successEmbed = new EmbedBuilder()
      .setColor('#87CEEB')
      .setTitle('üßò Thi·ªÅn ƒë·ªãnh tu luy·ªán th√†nh c√¥ng!')
      .setDescription(`**${username}** ƒë√£ ho√†n th√†nh bu·ªïi thi·ªÅn ƒë·ªãnh.`)
      .addFields(
        {
          name: 'üìä Linh kh√≠ nh·∫≠n ƒë∆∞·ª£c',
          value: `**+${expGained} Linh kh√≠**`,
          inline: true
        },
        {
          name: 'üíé Linh th·∫°ch thu ƒë∆∞·ª£c',
          value: SpiritStonesCalculator.formatSpiritStones(spiritStones),
          inline: true
        },
        {
          name: 'üåø C·∫£nh gi·ªõi hi·ªán t·∫°i',
          value: `**${playerManager.getRealmDisplayName(player.realm, player.realmLevel)}**`,
          inline: true
        }
      )
      .addFields({
        name: 'üîç Chi ti·∫øt t√≠nh to√°n Linh kh√≠',
        value: expResult.breakdown.calculation,
        inline: false
      })
      .setFooter({ text: 'Thi·ªÅn ƒë·ªãnh c√≥ th·ªÉ th·ª±c hi·ªán sau 1 gi·ªù' })
      .setTimestamp();

    await interaction.reply({ embeds: [successEmbed] });
  },
};
