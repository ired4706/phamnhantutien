const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, StringSelectMenuBuilder } = require('discord.js');
const playerManager = require('../systems/player.js');
const itemLoader = require('../utils/item-loader.js');
const cooldownManager = require('../utils/cooldown.js');

module.exports = {
  name: 'forge',
  aliases: ['re', 'chutao', 'weapon'],
  description: 'Ch·∫ø t·∫°o v≈© kh√≠ theo ng≈© h√†nh s·ª≠ d·ª•ng kho√°ng th·∫°ch v√† da th√∫',
  cooldown: 0, // 1 gi·ªù = 3600000ms

  // T·∫°o separator ƒë·∫πp m·∫Øt
  createSeparator() {
    return '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ';
  },

  // L·∫•y m√†u theo rarity
  getRarityColor(rarity) {
    const colors = {
      'common': '#9B9B9B',      // X√°m
      'uncommon': '#4CAF50',    // Xanh l√°
      'rare': '#2196F3',        // Xanh d∆∞∆°ng
      'epic': '#9C27B0',        // T√≠m
      'legendary': '#FF9800'    // Cam
    };
    return colors[rarity] || '#9B9B9B';
  },

  // L·∫•y emoji rarity
  getRarityEmoji(rarity) {
    const emojis = {
      'common': '‚ö™',
      'uncommon': 'üü¢',
      'rare': 'üîµ',
      'epic': 'üü£',
      'legendary': 'üü†'
    };
    return emojis[rarity] || '‚ö™';
  },

  // L·∫•y emoji theo ng≈© h√†nh
  getElementEmoji(element) {
    const elementEmojis = {
      'kim': '‚öîÔ∏è',
      'moc': 'üå≥',
      'thuy': 'üíß',
      'hoa': 'üî•',
      'tho': 'üèîÔ∏è'
    };
    return elementEmojis[element] || '‚ùì';
  },

  // L·∫•y t√™n hi·ªÉn th·ªã cho ng≈© h√†nh
  getElementDisplayName(element) {
    const elementNames = {
      'kim': 'Kim (Kim Lo·∫°i)',
      'moc': 'M·ªôc (G·ªó)',
      'thuy': 'Th·ªßy (N∆∞·ªõc)',
      'hoa': 'H·ªèa (L·ª≠a)',
      'tho': 'Th·ªï (ƒê·∫•t)'
    };
    return elementNames[element] || element;
  },

  // L·∫•y t√™n hi·ªÉn th·ªã cho lo·∫°i v≈© kh√≠
  getWeaponTypeDisplayName(type) {
    const typeNames = {
      'sword': 'Ki·∫øm',
      'spear': 'Th∆∞∆°ng',
      'staff': 'Tr∆∞·ª£ng',
      'fan': 'Qu·∫°t',
      'bow': 'Cung',
      'double_sword': 'Song Ki·∫øm',
      'broadsword': 'ƒêao',
      'fist': 'Quy·ªÅn',
      'mace': 'Ch√πy',
      'axe': 'R√¨u'
    };
    return typeNames[type] || type;
  },

  async execute(interaction, args) {
    const userId = interaction.user.id;
    const username = interaction.user.username;

    // Ki·ªÉm tra xem user ƒë√£ b·∫Øt ƒë·∫ßu game ch∆∞a
    if (!playerManager.hasStartedGame(userId)) {
      const notStartedEmbed = playerManager.createNotStartedEmbed();
      await interaction.reply({ embeds: [notStartedEmbed] });
      return;
    }

    // N·∫øu kh√¥ng c√≥ args, hi·ªÉn th·ªã th√¥ng tin l√≤ r√®n v√† c√°c button
    if (!args || args.length === 0) {
      await this.showForgeInfo(interaction, userId);
      return;
    }

    // N·∫øu c√≥ args, th·ª±c hi·ªán ch·∫ø t·∫°o v≈© kh√≠
    const weaponId = args[0];

    // Ki·ªÉm tra cooldown
    const player = playerManager.getPlayer(userId);
    const cooldownCheck = cooldownManager.checkCooldown(player, 'forge', this.cooldown);
    if (cooldownCheck.isOnCooldown) {
      const cooldownEmbed = cooldownManager.createCooldownEmbed('forge', cooldownCheck.remainingText);
      await interaction.reply({ embeds: [cooldownEmbed] });
      return;
    }

    await this.craftWeapon(interaction, userId, username, weaponId);
  },

  // Hi·ªÉn th·ªã th√¥ng tin l√≤ r√®n v√† c√°c button
  async showForgeInfo(interaction, userId) {
    const player = playerManager.getPlayer(userId);
    const forgeLevel = player.forge?.forgeLevel || 1;
    const totalCrafted = player.forge?.totalCrafted || 0;
    const successCount = player.forge?.successCount || 0;
    const failureCount = player.forge?.failureCount || 0;
    const successRate = totalCrafted > 0 ? Math.round((successCount / totalCrafted) * 100) : 0;

    const embed = new EmbedBuilder()
      .setColor('#8B4513')
      .setTitle('‚öíÔ∏è **Th√¥ng Tin L√≤ R√®n**')
      .setDescription(`${this.createSeparator()}\n**Th√¥ng tin chi ti·∫øt v·ªÅ l√≤ r√®n c·ªßa b·∫°n**`)
      .addFields(
        {
          name: 'üî• **Level L√≤ R√®n**',
          value: `**${forgeLevel}** (T·ªâ l·ªá th√†nh c√¥ng: **${65 + (forgeLevel - 1) * 5}%**)`,
          inline: true
        },
        {
          name: 'üìä **Th·ªëng K√™ Ch·∫ø T·∫°o**',
          value: `**T·ªïng s·ªë**: ${totalCrafted}\n**Th√†nh c√¥ng**: ${successCount}\n**Th·∫•t b·∫°i**: ${failureCount}`,
          inline: true
        },
        {
          name: 'üìà **T·ªâ L·ªá Th√†nh C√¥ng**',
          value: `**${successRate}%** (${successCount}/${totalCrafted})`,
          inline: true
        }
      )
      .addFields({
        name: '‚öîÔ∏è **Ch·ªçn Ng≈© H√†nh V≈© Kh√≠**',
        value: 'Nh·∫•n v√†o c√°c button b√™n d∆∞·ªõi ƒë·ªÉ xem danh s√°ch v≈© kh√≠ theo ng≈© h√†nh',
        inline: false
      })
      .setFooter({ text: 'S·ª≠ d·ª•ng fforge <id_vu_khi> ƒë·ªÉ ch·∫ø t·∫°o v≈© kh√≠ c·ª• th·ªÉ' })
      .setTimestamp();

    // T·∫°o c√°c button theo ng≈© h√†nh
    const buttons = [
      new ButtonBuilder()
        .setCustomId('forge_element_kim')
        .setLabel('‚öîÔ∏è Kim (Kim Lo·∫°i)')
        .setStyle(ButtonStyle.Primary),
      new ButtonBuilder()
        .setCustomId('forge_element_moc')
        .setLabel('üå≥ M·ªôc (G·ªó)')
        .setStyle(ButtonStyle.Success),
      new ButtonBuilder()
        .setCustomId('forge_element_thuy')
        .setLabel('üíß Th·ªßy (N∆∞·ªõc)')
        .setStyle(ButtonStyle.Secondary),
      new ButtonBuilder()
        .setCustomId('forge_element_hoa')
        .setLabel('üî• H·ªèa (L·ª≠a)')
        .setStyle(ButtonStyle.Danger),
      new ButtonBuilder()
        .setCustomId('forge_element_tho')
        .setLabel('üèîÔ∏è Th·ªï (ƒê·∫•t)')
        .setStyle(ButtonStyle.Secondary)
    ];

    const buttonRow = new ActionRowBuilder().addComponents(buttons);

    // Button th√¥ng tin l√≤ r√®n
    const infoButton = new ButtonBuilder()
      .setCustomId('forge_forge_info')
      .setLabel('‚öíÔ∏è Th√¥ng Tin L√≤ R√®n')
      .setStyle(ButtonStyle.Secondary);

    const infoRow = new ActionRowBuilder().addComponents(infoButton);

    await interaction.reply({
      embeds: [embed],
      components: [buttonRow, infoRow]
    });
  },

  // X·ª≠ l√Ω button interactions
  async handleButton(interaction) {
    const { customId } = interaction;
    const userId = interaction.user.id;

    if (customId === 'forge_back_main') {
      await this.showForgeInfo(interaction, userId);
    } else if (customId === 'forge_forge_info') {
      await this.showDetailedForgeInfo(interaction);
    } else if (customId.startsWith('forge_element_')) {
      const element = customId.replace('forge_element_', '');
      await this.showWeaponsByElement(interaction, element, userId);
    }
  },

  // X·ª≠ l√Ω select menu interactions
  async handleSelectMenu(interaction) {
    try {
      const { customId, values } = interaction;
      const userId = interaction.user.id;

      if (customId === 'forge_select_weapon') {
        const selectedWeaponId = values[0];
        if (!selectedWeaponId) {
          await interaction.reply({
            content: '‚ùå Kh√¥ng c√≥ v≈© kh√≠ n√†o ƒë∆∞·ª£c ch·ªçn!',
            ephemeral: true
          });
          return;
        }

        // Hi·ªÉn th·ªã ch·ªçn s·ªë l∆∞·ª£ng c·∫ßn ch·∫ø t·∫°o
        await this.showQuantitySelect(interaction, userId, selectedWeaponId);
        return;
      } else if (customId.startsWith('forge_select_qty:')) {
        const selectedWeaponId = customId.split(':')[1];
        const qtyValue = values[0];
        const player = playerManager.getPlayer(userId);
        const weapon = itemLoader.items[selectedWeaponId];

        if (!weapon) {
          await interaction.reply({ content: '‚ùå Kh√¥ng t√¨m th·∫•y v≈© kh√≠!', ephemeral: true });
          return;
        }

        const maxCraft = this.getMaxCraftable(player, weapon);
        if (maxCraft < 1) {
          await interaction.reply({ content: '‚ö†Ô∏è ƒê·∫°o h·ªØu kh√¥ng ƒë·ªß nguy√™n li·ªáu ch·∫ø t·∫°o', ephemeral: true });
          return;
        }

        let quantity = qtyValue === 'max' ? maxCraft : parseInt(qtyValue, 10);
        if (!quantity || quantity < 1) {
          await interaction.reply({ content: '‚ùå S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá!', ephemeral: true });
          return;
        }
        if (quantity > maxCraft) quantity = maxCraft;

        if (quantity === 1) {
          await this.craftSelectedWeapon(interaction, selectedWeaponId, userId);
        } else {
          await this.craftSelectedWeaponBatch(interaction, selectedWeaponId, userId, quantity);
        }
        return;
      }
    } catch (error) {
      console.error('‚ùå Error in handleSelectMenu:', error);
      await interaction.reply({
        content: '‚ùå C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω select menu!',
        ephemeral: true
      });
    }
  },

  // Hi·ªÉn th·ªã v≈© kh√≠ theo ng≈© h√†nh
  async showWeaponsByElement(interaction, element, userId) {
    // Load items n·∫øu ch∆∞a load
    await itemLoader.loadAllItems();

    const weapons = Object.values(itemLoader.items).filter(item =>
      item.type && item.element === element && item.crafting // Ch·ªâ l·∫•y items c√≥ type, element v√† crafting (v≈© kh√≠)
    );

    if (weapons.length === 0) {
      const noWeaponsEmbed = new EmbedBuilder()
        .setColor('#FFA500')
        .setTitle('‚ö†Ô∏è **Kh√¥ng C√≥ V≈© Kh√≠**')
        .setDescription(`Kh√¥ng t√¨m th·∫•y v≈© kh√≠ ng≈© h√†nh **${this.getElementDisplayName(element)}**!`)
        .setFooter({ text: 'Quay l·∫°i menu ch√≠nh' })
        .setTimestamp();

      const backButton = new ButtonBuilder()
        .setCustomId('forge_back_main')
        .setLabel('üîô Quay L·∫°i')
        .setStyle(ButtonStyle.Secondary);

      const backRow = new ActionRowBuilder().addComponents(backButton);

      await interaction.update({
        embeds: [noWeaponsEmbed],
        components: [backRow]
      });
      return;
    }

    // L·∫•y th√¥ng tin player ƒë·ªÉ ki·ªÉm tra s·ªë l∆∞·ª£ng nguy√™n li·ªáu
    const player = playerManager.getPlayer(userId);

    // Nh√≥m theo rarity
    const weaponsByRarity = {};
    weapons.forEach(weapon => {
      const rarity = weapon.rarity || 'common';
      if (!weaponsByRarity[rarity]) {
        weaponsByRarity[rarity] = [];
      }
      weaponsByRarity[rarity].push(weapon);
    });

    const elementEmoji = this.getElementEmoji(element);
    const elementName = this.getElementDisplayName(element);

    const embed = new EmbedBuilder()
      .setColor(this.getRarityColor(element === 'kim' ? 'rare' : 'epic'))
      .setTitle(`${elementEmoji} **V≈© Kh√≠ ${elementName}**`)
      .setDescription(`${this.createSeparator()}\n**Danh s√°ch v≈© kh√≠ ng≈© h√†nh ${elementName}**\n\nüí° **S·ª≠ d·ª•ng**: \`fforge <id_vu_khi>\` ƒë·ªÉ ch·∫ø t·∫°o v≈© kh√≠`);

    // Hi·ªÉn th·ªã theo rarity t·ª´ th·∫•p ƒë·∫øn cao
    const rarityOrder = ['common', 'uncommon', 'rare', 'epic', 'legendary'];

    rarityOrder.forEach(rarity => {
      if (weaponsByRarity[rarity] && weaponsByRarity[rarity].length > 0) {
        const weaponsList = weaponsByRarity[rarity];
        const rarityEmoji = this.getRarityEmoji(rarity);
        const rarityName = this.getRarityDisplayName(rarity);

        // Chia nh·ªè danh s√°ch ƒë·ªÉ tr√°nh v∆∞·ª£t qu√° 1024 k√Ω t·ª±
        const maxItemsPerField = 3;
        const chunks = this.chunkArray(weaponsList, maxItemsPerField);

        chunks.forEach((chunk, index) => {
          const weaponsListFormatted = chunk.map(weapon => {
            // Hi·ªÉn th·ªã nguy√™n li·ªáu v·ªõi s·ªë l∆∞·ª£ng available (r√∫t g·ªçn)
            const materials = Object.entries(weapon.crafting || {}).map(([id, qty]) => {
              const materialInfo = itemLoader.getItemInfo(id);
              const playerMaterial = player.inventory.items.find(item => item.id === id);
              const availableQty = playerMaterial ? playerMaterial.quantity : 0;
              const materialName = materialInfo ? materialInfo.name : id;
              const materialEmoji = materialInfo ? materialInfo.emoji : '‚ùì';

              return `${materialEmoji} **${materialName}** x${qty} (c√≤n: ${availableQty})`;
            }).join(', ');

            // Th√™m icon rarity v√†o tr∆∞·ªõc t√™n v≈© kh√≠
            const rarityEmoji = this.getRarityEmoji(weapon.rarity || 'common');
            const weaponTypeName = this.getWeaponTypeDisplayName(weapon.type);

            return `${rarityEmoji} **${weapon.name}** (${weaponTypeName})\n‚îî **Nguy√™n li·ªáu**: ${materials}`;
          }).join('\n\n');

          const fieldName = '\u200B'; // zero-width space ƒë·ªÉ tr√°nh l·ªói t√™n field r·ªóng

          embed.addFields({
            name: fieldName,
            value: weaponsListFormatted,
            inline: false
          });
        });
      }
    });

    // T·∫°o button quay l·∫°i
    const backButton = new ButtonBuilder()
      .setCustomId('forge_back_main')
      .setLabel('üîô Quay L·∫°i')
      .setStyle(ButtonStyle.Secondary);

    // T·∫°o select menu ƒë·ªÉ ch·ªçn v≈© kh√≠
    const selectMenu = new StringSelectMenuBuilder()
      .setCustomId('forge_select_weapon')
      .setPlaceholder('Ch·ªçn v≈© kh√≠ ƒë·ªÉ ch·∫ø t·∫°o...');

    // Th√™m t·ª´ng option m·ªôt c√°ch ri√™ng bi·ªát
    weapons.forEach(weapon => {
      const rarityEmoji = this.getRarityEmoji(weapon.rarity || 'common');
      const weaponId = Object.keys(itemLoader.items).find(key => itemLoader.items[key] === weapon);

      if (weaponId) {
        selectMenu.addOptions({
          label: `${rarityEmoji} ${weapon.name}`,
          description: `ID: ${weaponId}`,
          value: weaponId
        });
      }
    });

    const backRow = new ActionRowBuilder().addComponents(backButton);
    const selectRow = new ActionRowBuilder().addComponents(selectMenu);

    await interaction.update({
      embeds: [embed],
      components: [selectRow, backRow]
    });
  },

  // Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt l√≤ r√®n
  async showDetailedForgeInfo(interaction) {
    const userId = interaction.user.id;
    const player = playerManager.getPlayer(userId);
    const forgeLevel = player.forge?.forgeLevel || 1;
    const totalCrafted = player.forge?.totalCrafted || 0;
    const successCount = player.forge?.successCount || 0;
    const failureCount = player.forge?.failureCount || 0;
    const successRate = totalCrafted > 0 ? Math.round((successCount / totalCrafted) * 100) : 0;

    const baseSuccessRate = 65;
    const levelBonus = (forgeLevel - 1) * 5;
    const currentSuccessRate = Math.min(baseSuccessRate + levelBonus, 95);

    const embed = new EmbedBuilder()
      .setColor('#FF8C00')
      .setTitle('‚öíÔ∏è **Th√¥ng Tin Chi Ti·∫øt L√≤ R√®n**')
      .setDescription(`${this.createSeparator()}\n**Th√¥ng tin chi ti·∫øt v·ªÅ l√≤ r√®n v√† h·ªá th·ªëng ch·∫ø t·∫°o v≈© kh√≠**`)
      .addFields(
        {
          name: 'üî• **Th√¥ng S·ªë L√≤ R√®n**',
          value: `**Level hi·ªán t·∫°i**: ${forgeLevel}\n**T·ªâ l·ªá c∆° b·∫£n**: ${baseSuccessRate}%\n**Bonus level**: +${levelBonus}%\n**T·ªâ l·ªá hi·ªán t·∫°i**: **${currentSuccessRate}%**`,
          inline: false
        },
        {
          name: 'üìä **Th·ªëng K√™ Chi Ti·∫øt**',
          value: `**T·ªïng s·ªë l·∫ßn ch·∫ø t·∫°o**: ${totalCrafted}\n**Th√†nh c√¥ng**: ${successCount} (${successRate}%)\n**Th·∫•t b·∫°i**: ${failureCount} (${100 - successRate}%)\n**L·∫ßn ch·∫ø t·∫°o g·∫ßn nh·∫•t**: ${totalCrafted > 0 ? 'ƒê√£ ch·∫ø t·∫°o' : 'Ch∆∞a ch·∫ø t·∫°o'}`,
          inline: false
        },
        {
          name: 'üìà **B·∫£ng T·ªâ L·ªá Theo Level**',
          value: this.createForgeLevelTable(),
          inline: false
        },
        {
          name: 'üí° **G·ª£i √ù N√¢ng C·∫•p**',
          value: 'N√¢ng c·∫•p l√≤ r√®n s·∫Ω tƒÉng t·ªâ l·ªá th√†nh c√¥ng ch·∫ø t·∫°o v≈© kh√≠. M·ªói level tƒÉng 5% t·ªâ l·ªá th√†nh c√¥ng, t·ªëi ƒëa 95%.',
          inline: false
        }
      )
      .setFooter({ text: 'S·ª≠ d·ª•ng fforge ƒë·ªÉ quay l·∫°i menu ch√≠nh' })
      .setTimestamp();

    const backButton = new ButtonBuilder()
      .setCustomId('forge_back_main')
      .setLabel('üîô Quay L·∫°i')
      .setStyle(ButtonStyle.Secondary);

    const backRow = new ActionRowBuilder().addComponents(backButton);

    await interaction.update({
      embeds: [embed],
      components: [backRow]
    });
  },

  // T·∫°o b·∫£ng t·ªâ l·ªá theo level
  createForgeLevelTable() {
    let table = '```\n';
    table += 'Level | T·ªâ L·ªá | Ghi Ch√∫\n';
    table += '------|--------|---------\n';

    for (let level = 1; level <= 10; level++) {
      const baseRate = 65;
      const bonus = (level - 1) * 5;
      const totalRate = Math.min(baseRate + bonus, 95);
      const note = level === 1 ? 'M·∫∑c ƒë·ªãnh' : `+${bonus}%`;

      table += `${level.toString().padStart(4)} | ${totalRate.toString().padStart(6)}% | ${note}\n`;
    }

    table += '```';
    return table;
  },

  // H√†m chia nh·ªè array
  chunkArray(array, size) {
    const chunks = [];
    for (let i = 0; i < array.length; i += size) {
      chunks.push(array.slice(i, i + size));
    }
    return chunks;
  },

  // L·∫•y t√™n hi·ªÉn th·ªã cho rarity
  getRarityDisplayName(rarity) {
    const displayNames = {
      'common': 'Th∆∞·ªùng',
      'uncommon': 'Hi·∫øm',
      'rare': 'Qu√Ω Hi·∫øm',
      'epic': 'C·ª±c Qu√Ω',
      'legendary': 'Huy·ªÅn Tho·∫°i'
    };
    return displayNames[rarity] || rarity;
  },

  // Th·ª±c hi·ªán ch·∫ø t·∫°o v≈© kh√≠
  async craftWeapon(interaction, userId, username, weaponId) {
    const player = playerManager.getPlayer(userId);
    const now = Date.now();

    // Load items n·∫øu ch∆∞a load
    await itemLoader.loadAllItems();

    // T√¨m v≈© kh√≠ c·∫ßn ch·∫ø t·∫°o
    const weaponInfo = itemLoader.getItemInfo(weaponId);
    if (!weaponInfo || !weaponInfo.type) {
      const errorEmbed = new EmbedBuilder()
        .setColor('#FF0000')
        .setTitle('‚ùå **L·ªói Ch·∫ø T·∫°o V≈© Kh√≠**')
        .setDescription('Kh√¥ng t√¨m th·∫•y v≈© kh√≠ c·∫ßn ch·∫ø t·∫°o ho·∫∑c ID kh√¥ng h·ª£p l·ªá!')
        .addFields({
          name: 'üí° G·ª£i √Ω',
          value: 'S·ª≠ d·ª•ng `fforge` ƒë·ªÉ xem danh s√°ch v≈© kh√≠ c√≥ th·ªÉ ch·∫ø t·∫°o',
          inline: false
        });

      await interaction.reply({ embeds: [errorEmbed] });
      return;
    }

    // Ki·ªÉm tra materials c·∫ßn thi·∫øt
    const craftingMaterials = weaponInfo.crafting || {};
    const missingMaterials = [];
    const availableMaterials = [];

    for (const [materialId, requiredQty] of Object.entries(craftingMaterials)) {
      const playerMaterial = player.inventory.items.find(item => item.id === materialId);
      const availableQty = playerMaterial ? playerMaterial.quantity : 0;

      if (availableQty < requiredQty) {
        missingMaterials.push({
          id: materialId,
          name: itemLoader.getItemInfo(materialId)?.name || materialId,
          emoji: itemLoader.getItemInfo(materialId)?.emoji || '‚ùì',
          required: requiredQty,
          available: availableQty,
          missing: requiredQty - availableQty
        });
      } else {
        availableMaterials.push({
          id: materialId,
          name: itemLoader.getItemInfo(materialId)?.name || materialId,
          emoji: itemLoader.getItemInfo(materialId)?.emoji || '‚ùì',
          required: requiredQty,
          available: availableQty
        });
      }
    }

    // N·∫øu thi·∫øu materials, hi·ªÉn th·ªã th√¥ng b√°o
    if (missingMaterials.length > 0) {
      const missingEmbed = new EmbedBuilder()
        .setColor('#FFA500')
        .setTitle('‚ö†Ô∏è **Thi·∫øu Nguy√™n Li·ªáu Ch·∫ø T·∫°o**')
        .setDescription(`**${username}** kh√¥ng ƒë·ªß nguy√™n li·ªáu ƒë·ªÉ ch·∫ø t·∫°o **${weaponInfo.name}**!`)
        .addFields({
          name: 'üîç **Nguy√™n Li·ªáu C·∫ßn Thi·∫øt**',
          value: availableMaterials.map(material =>
            `‚úÖ ${material.emoji} **${material.name}**: ${material.available}/${material.required}`
          ).join('\n'),
          inline: false
        })
        .addFields({
          name: '‚ùå **Nguy√™n Li·ªáu Thi·∫øu**',
          value: missingMaterials.map(material =>
            `‚ùå ${material.emoji} **${material.name}**: ${material.available}/${material.required} (Thi·∫øu: ${material.missing})`
          ).join('\n'),
          inline: false
        })
        .addFields({
          name: 'üí° **G·ª£i √Ω**',
          value: 'S·ª≠ d·ª•ng `fhunt` ƒë·ªÉ sƒÉn y√™u th√∫ l·∫•y da th√∫, `fmine` ƒë·ªÉ khai th√°c kho√°ng th·∫°ch',
          inline: false
        });

      await interaction.reply({ embeds: [missingEmbed] });
      return;
    }

    // T√≠nh to√°n t·ªâ l·ªá th√†nh c√¥ng d·ª±a tr√™n level l√≤ r√®n
    const forgeLevel = player.forge?.forgeLevel || 1;
    const baseSuccessRate = 65; // 65% c∆° b·∫£n
    const levelBonus = (forgeLevel - 1) * 5; // M·ªói level tƒÉng 5%
    const maxSuccessRate = 95; // T·ªëi ƒëa 95%
    const successRate = Math.min(baseSuccessRate + levelBonus, maxSuccessRate);

    // Th·ª±c hi·ªán ch·∫ø t·∫°o v≈© kh√≠
    const isSuccess = Math.random() * 100 < successRate;

    if (isSuccess) {
      // Ch·∫ø t·∫°o v≈© kh√≠ th√†nh c√¥ng
      // Tr·ª´ materials
      for (const [materialId, requiredQty] of Object.entries(craftingMaterials)) {
        const playerMaterial = player.inventory.items.find(item => item.id === materialId);
        if (playerMaterial) {
          playerMaterial.quantity -= requiredQty;
          // X√≥a item n·∫øu h·∫øt
          if (playerMaterial.quantity <= 0) {
            player.inventory.items = player.inventory.items.filter(item => item.id !== materialId);
          }
        }
      }

      // Th√™m v≈© kh√≠ v√†o inventory
      const existingWeapon = player.inventory.weapons.find(item => item.id === weaponId);
      if (existingWeapon) {
        existingWeapon.quantity += 1;
      } else {
        player.inventory.weapons.push({
          id: weaponId,
          quantity: 1
        });
      }

      // C·∫≠p nh·∫≠t th·ªëng k√™ ch·∫ø t·∫°o
      if (!player.forge) player.forge = {};
      player.forge.totalCrafted = (player.forge.totalCrafted || 0) + 1;
      player.forge.successCount = (player.forge.successCount || 0) + 1;
      player.forge.lastForge = now;

      // C·∫≠p nh·∫≠t player
      const updateData = {
        'forge.lastForge': now,
        'forge.totalCrafted': player.forge.totalCrafted,
        'forge.successCount': player.forge.successCount
      };
      playerManager.savePlayers();

      // T·∫°o embed th√¥ng b√°o th√†nh c√¥ng
      const successEmbed = new EmbedBuilder()
        .setColor('#00FF00')
        .setTitle('üéâ **Ch·∫ø T·∫°o V≈© Kh√≠ Th√†nh C√¥ng!**')
        .setDescription(`${this.createSeparator()}\n**${username}** ƒë√£ ch·∫ø t·∫°o th√†nh c√¥ng **${weaponInfo.name}**!`)
        .addFields(
          {
            name: '‚öîÔ∏è **V≈© Kh√≠ Thu ƒê∆∞·ª£c**',
            value: `${weaponInfo.emoji} **${weaponInfo.name}** ${this.getRarityEmoji(weaponInfo.rarity)}`,
            inline: false
          },
          {
            name: 'üî• **Level L√≤ R√®n**',
            value: `**${forgeLevel}** (T·ªâ l·ªá th√†nh c√¥ng: **${successRate}%**)`,
            inline: true
          },
          {
            name: 'üåä **Ng≈© H√†nh**',
            value: `${this.getElementEmoji(weaponInfo.element)} **${this.getElementDisplayName(weaponInfo.element)}**`,
            inline: true
          },
          {
            name: 'üó°Ô∏è **Lo·∫°i V≈© Kh√≠**',
            value: `**${this.getWeaponTypeDisplayName(weaponInfo.type)}**`,
            inline: true
          }
        )
        .addFields({
          name: 'üîç **Nguy√™n Li·ªáu ƒê√£ S·ª≠ D·ª•ng**',
          value: availableMaterials.map(material =>
            `${material.emoji} **${material.name}**: ${material.required}`
          ).join('\n'),
          inline: false
        })
        .setFooter({ text: cooldownManager.cooldownMessages.forge })
        .setTimestamp();

      await interaction.reply({ embeds: [successEmbed] });

    } else {
      // Ch·∫ø t·∫°o v≈© kh√≠ th·∫•t b·∫°i
      // V·∫´n tr·ª´ materials (th·∫•t b·∫°i c≈©ng m·∫•t nguy√™n li·ªáu)
      for (const [materialId, requiredQty] of Object.entries(craftingMaterials)) {
        const playerMaterial = player.inventory.items.find(item => item.id === materialId);
        if (playerMaterial) {
          playerMaterial.quantity -= requiredQty;
          // X√≥a item n·∫øu h·∫øt
          if (playerMaterial.quantity <= 0) {
            player.inventory.items = player.inventory.items.filter(item => item.id !== materialId);
          }
        }
      }

      // C·∫≠p nh·∫≠t th·ªëng k√™ ch·∫ø t·∫°o
      if (!player.forge) player.forge = {};
      player.forge.totalCrafted = (player.forge.totalCrafted || 0) + 1;
      player.forge.failureCount = (player.forge.failureCount || 0) + 1;
      player.forge.lastForge = now;

      // C·∫≠p nh·∫≠t player
      const updateData = {
        'forge.lastForge': now,
        'forge.totalCrafted': player.forge.totalCrafted,
        'forge.failureCount': player.forge.failureCount
      };
      playerManager.savePlayers();

      // T·∫°o embed th√¥ng b√°o th·∫•t b·∫°i
      const failureEmbed = new EmbedBuilder()
        .setColor('#FF0000')
        .setTitle('üí• **Ch·∫ø T·∫°o V≈© Kh√≠ Th·∫•t B·∫°i!**')
        .setDescription(`${this.createSeparator()}\n**${username}** ƒë√£ th·∫•t b·∫°i khi ch·∫ø t·∫°o **${weaponInfo.name}**!`)
        .addFields(
          {
            name: 'üî• **Level L√≤ R√®n**',
            value: `**${forgeLevel}** (T·ªâ l·ªá th√†nh c√¥ng: **${successRate}%**)`,
            inline: true
          },
          {
            name: 'üíî **H·∫≠u Qu·∫£**',
            value: 'Nguy√™n li·ªáu ƒë√£ b·ªã m·∫•t do ch·∫ø t·∫°o th·∫•t b·∫°i!',
            inline: true
          }
        )
        .addFields({
          name: 'üîç **Nguy√™n Li·ªáu ƒê√£ M·∫•t**',
          value: availableMaterials.map(material =>
            `${material.emoji} **${material.name}**: ${material.required}`
          ).join('\n'),
          inline: false
        })
        .addFields({
          name: 'üí° **G·ª£i √Ω**',
          value: 'N√¢ng c·∫•p l√≤ r√®n ƒë·ªÉ tƒÉng t·ªâ l·ªá th√†nh c√¥ng!',
          inline: false
        })
        .setFooter({ text: cooldownManager.cooldownMessages.forge })
        .setTimestamp();

      await interaction.reply({ embeds: [failureEmbed] });
    }
  },

  // Ch·∫ø t·∫°o v≈© kh√≠ ƒë∆∞·ª£c ch·ªçn
  async craftSelectedWeapon(interaction, weaponId, userId) {
    // Load items n·∫øu ch∆∞a load
    await itemLoader.loadAllItems();

    const weapon = itemLoader.items[weaponId];
    if (!weapon) {
      await interaction.reply({ content: '‚ùå Kh√¥ng t√¨m th·∫•y v≈© kh√≠!', ephemeral: true });
      return;
    }

    const player = playerManager.getPlayer(userId);
    if (!player) {
      await interaction.reply({ content: '‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi ch∆°i!', ephemeral: true });
      return;
    }

    // Ki·ªÉm tra materials
    const missingMaterials = [];
    for (const [materialId, requiredQty] of Object.entries(weapon.crafting || {})) {
      const playerMaterial = player.inventory.items.find(item => item.id === materialId);
      const availableQty = playerMaterial ? playerMaterial.quantity : 0;

      if (availableQty < requiredQty) {
        const materialInfo = itemLoader.getItemInfo(materialId);
        const materialName = materialInfo ? materialInfo.name : materialId;
        missingMaterials.push(`${materialName} (c·∫ßn: ${requiredQty}, c√≥: ${availableQty})`);
      }
    }

    if (missingMaterials.length > 0) {
      await interaction.reply({
        content: `‚ùå Thi·∫øu nguy√™n li·ªáu:\n${missingMaterials.join('\n')}`,
        ephemeral: true
      });
      return;
    }

    // T√≠nh t·ªâ l·ªá th√†nh c√¥ng d·ª±a tr√™n level l√≤ r√®n
    const forgeLevel = player.forge?.forgeLevel || 1;
    const baseSuccessRate = 0.65; // 65% c∆° b·∫£n
    const levelBonus = (forgeLevel - 1) * 0.05; // +5% m·ªói level
    const successRate = Math.min(baseSuccessRate + levelBonus, 0.95); // T·ªëi ƒëa 95%

    // Th·ª±c hi·ªán ch·∫ø t·∫°o v≈© kh√≠
    const isSuccess = Math.random() < successRate;

    if (isSuccess) {
      // Th√†nh c√¥ng: th√™m v≈© kh√≠ v√†o inventory
      const existingWeapon = player.inventory.weapons.find(item => item.id === weaponId);
      if (existingWeapon) {
        existingWeapon.quantity += 1;
      } else {
        player.inventory.weapons.push({
          id: weaponId,
          quantity: 1
        });
      }

      // C·∫≠p nh·∫≠t th·ªëng k√™ forge
      if (!player.forge) player.forge = { forgeLevel: 1, totalCrafted: 0, successCount: 0, failureCount: 0, lastForge: 0 };
      player.forge.totalCrafted++;
      player.forge.successCount++;
      player.forge.lastForge = Date.now();

      // Ti√™u th·ª• nguy√™n li·ªáu
      for (const [materialId, requiredQty] of Object.entries(weapon.crafting || {})) {
        const playerMaterial = player.inventory.items.find(item => item.id === materialId);
        if (playerMaterial) {
          playerMaterial.quantity -= requiredQty;
          if (playerMaterial.quantity <= 0) {
            player.inventory.items = player.inventory.items.filter(item => item.id !== materialId);
          }
        }
      }

      // L∆∞u player data
      playerManager.savePlayers();

      // T·∫°o embed th√¥ng b√°o th√†nh c√¥ng
      const successEmbed = new EmbedBuilder()
        .setColor(0x00FF00)
        .setTitle('‚öíÔ∏è Ch·∫ø T·∫°o V≈© Kh√≠ Th√†nh C√¥ng!')
        .setDescription(`**${weapon.name}** ƒë√£ ƒë∆∞·ª£c ch·∫ø t·∫°o th√†nh c√¥ng!`)
        .addFields(
          { name: 'üéØ T·ªâ l·ªá th√†nh c√¥ng', value: `${(successRate * 100).toFixed(1)}%`, inline: true },
          { name: 'üî• Level l√≤ r√®n', value: `${forgeLevel}`, inline: true },
          { name: 'üìä Th·ªëng k√™', value: `T·ªïng: ${player.forge.totalCrafted} | Th√†nh c√¥ng: ${player.forge.successCount} | Th·∫•t b·∫°i: ${player.forge.failureCount}`, inline: false }
        )
        .setTimestamp();

      await interaction.reply({ embeds: [successEmbed] });
    } else {
      // Th·∫•t b·∫°i: m·∫•t nguy√™n li·ªáu
      for (const [materialId, requiredQty] of Object.entries(weapon.crafting || {})) {
        const playerMaterial = player.inventory.items.find(item => item.id === materialId);
        if (playerMaterial) {
          playerMaterial.quantity -= requiredQty;
          if (playerMaterial.quantity <= 0) {
            player.inventory.items = player.inventory.items.filter(item => item.id !== materialId);
          }
        }
      }

      // C·∫≠p nh·∫≠t th·ªëng k√™ forge
      if (!player.forge) player.forge = { forgeLevel: 1, totalCrafted: 0, successCount: 0, failureCount: 0, lastForge: 0 };
      player.forge.totalCrafted++;
      player.forge.failureCount++;
      player.forge.lastForge = Date.now();

      // L∆∞u player data
      playerManager.savePlayers();

      // T·∫°o embed th√¥ng b√°o th·∫•t b·∫°i
      const failureEmbed = new EmbedBuilder()
        .setColor(0xFF0000)
        .setTitle('üí• Ch·∫ø T·∫°o V≈© Kh√≠ Th·∫•t B·∫°i!')
        .setDescription(`**${weapon.name}** ch·∫ø t·∫°o th·∫•t b·∫°i! Nguy√™n li·ªáu ƒë√£ b·ªã m·∫•t.`)
        .addFields(
          { name: 'üéØ T·ªâ l·ªá th√†nh c√¥ng', value: `${(successRate * 100).toFixed(1)}%`, inline: true },
          { name: 'üî• Level l√≤ r√®n', value: `${forgeLevel}`, inline: true },
          { name: 'üí° G·ª£i √Ω', value: 'N√¢ng c·∫•p l√≤ r√®n ƒë·ªÉ tƒÉng t·ªâ l·ªá th√†nh c√¥ng!', inline: false }
        )
        .setTimestamp();

      await interaction.reply({ embeds: [failureEmbed] });
    }
  },

  // Ch·∫ø t·∫°o nhi·ªÅu v≈© kh√≠ trong m·ªôt l·∫ßn
  async craftSelectedWeaponBatch(interaction, weaponId, userId, quantity) {
    await itemLoader.loadAllItems();
    const weapon = itemLoader.items[weaponId];
    const player = playerManager.getPlayer(userId);
    if (!weapon || !player) {
      await interaction.reply({ content: '‚ùå Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu c·∫ßn thi·∫øt!', ephemeral: true });
      return;
    }

    const forgeLevel = player.forge?.forgeLevel || 1;
    const baseSuccessRate = 0.65;
    const levelBonus = (forgeLevel - 1) * 0.05;
    const successRate = Math.min(baseSuccessRate + levelBonus, 0.95);

    let successCount = 0;
    let failureCount = 0;
    let crafted = 0;

    for (let i = 0; i < quantity; i++) {
      // Ki·ªÉm tra ƒë·ªß nguy√™n li·ªáu cho 1 l·∫ßn
      const canCraft = Object.entries(weapon.crafting || {}).every(([matId, req]) => {
        const have = player.inventory.items.find(it => it.id === matId)?.quantity || 0;
        return have >= req;
      });
      if (!canCraft) break;

      // Tr·ª´ nguy√™n li·ªáu cho 1 l·∫ßn
      for (const [matId, req] of Object.entries(weapon.crafting || {})) {
        const invItem = player.inventory.items.find(it => it.id === matId);
        if (invItem) {
          invItem.quantity -= req;
          if (invItem.quantity <= 0) {
            player.inventory.items = player.inventory.items.filter(it => it.id !== matId);
          }
        }
      }

      crafted++;
      if (Math.random() < successRate) {
        const existingWeapon = player.inventory.weapons.find(item => item.id === weaponId);
        if (existingWeapon) {
          existingWeapon.quantity += 1;
        } else {
          player.inventory.weapons.push({
            id: weaponId,
            quantity: 1
          });
        }
        successCount++;
      } else {
        failureCount++;
      }
    }

    // C·∫≠p nh·∫≠t th·ªëng k√™ forge
    if (!player.forge) player.forge = { forgeLevel: 1, totalCrafted: 0, successCount: 0, failureCount: 0, lastForge: 0 };
    player.forge.totalCrafted += crafted;
    player.forge.successCount += successCount;
    player.forge.failureCount += failureCount;
    player.forge.lastForge = Date.now();

    playerManager.savePlayers();

    const resultEmbed = new EmbedBuilder()
      .setColor(successCount > 0 ? 0x00FF88 : 0xFF5555)
      .setTitle('‚öíÔ∏è K·∫øt Qu·∫£ Ch·∫ø T·∫°o V≈© Kh√≠')
      .setDescription(`**${weapon.name}** ‚Äî S·ªë l∆∞·ª£ng y√™u c·∫ßu: **${quantity}**`)
      .addFields(
        { name: '‚úÖ Th√†nh c√¥ng', value: `${successCount}`, inline: true },
        { name: '‚ùå Th·∫•t b·∫°i', value: `${failureCount}`, inline: true },
        { name: 'üî• Level l√≤ r√®n', value: `${forgeLevel} (t·ªâ l·ªá: ${(successRate * 100).toFixed(1)}%)`, inline: true }
      )
      .setTimestamp();

    await interaction.reply({ embeds: [resultEmbed] });
  },

  // Hi·ªÉn th·ªã select s·ªë l∆∞·ª£ng c·∫ßn ch·∫ø t·∫°o
  async showQuantitySelect(interaction, userId, weaponId) {
    await itemLoader.loadAllItems();
    const player = playerManager.getPlayer(userId);
    const weapon = itemLoader.items[weaponId];
    if (!weapon) {
      await interaction.reply({ content: '‚ùå Kh√¥ng t√¨m th·∫•y v≈© kh√≠!', ephemeral: true });
      return;
    }

    const maxCraft = this.getMaxCraftable(player, weapon);
    if (maxCraft < 1) {
      await interaction.reply({ content: '‚ö†Ô∏è ƒê·∫°o h·ªØu kh√¥ng ƒë·ªß nguy√™n li·ªáu ch·∫ø t·∫°o', ephemeral: true });
      return;
    }

    const materialsLine = Object.entries(weapon.crafting || {}).map(([id, qty]) => {
      const info = itemLoader.getItemInfo(id);
      const have = player.inventory.items.find(i => i.id === id)?.quantity || 0;
      const emoji = info?.emoji || '‚ùì';
      const name = info?.name || id;
      return `${emoji} ${name} x${qty} (c√≤n: ${have})`;
    }).join(', ');

    const embed = new EmbedBuilder()
      .setColor('#8B4513')
      .setTitle(`‚öíÔ∏è Ch·ªçn S·ªë L∆∞·ª£ng - ${weapon.name}`)
      .setDescription(`${this.createSeparator()}\nCh·ªçn s·ªë l∆∞·ª£ng c·∫ßn ch·∫ø t·∫°o.\n\nNguy√™n li·ªáu m·ªói v≈© kh√≠: ${materialsLine}\nT·ªëi ƒëa c√≥ th·ªÉ ch·∫ø t·∫°o: **${maxCraft}**`)
      .setTimestamp();

    const qtySelect = new StringSelectMenuBuilder()
      .setCustomId(`forge_select_qty:${weaponId}`)
      .setPlaceholder('Ch·ªçn s·ªë l∆∞·ª£ng...')
      .addOptions([
        { label: '1', value: '1', description: 'Ch·∫ø t·∫°o 1 v≈© kh√≠' },
        { label: '5', value: '5', description: 'Ch·∫ø t·∫°o 5 v≈© kh√≠' },
        { label: '10', value: '10', description: 'Ch·∫ø t·∫°o 10 v≈© kh√≠' },
        { label: `T·ªëi ƒëa (${maxCraft})`, value: 'max', description: 'Ch·∫ø t·∫°o t·ªëi ƒëa theo nguy√™n li·ªáu hi·ªán c√≥' }
      ]);

    const backButton = new ButtonBuilder()
      .setCustomId('forge_back_main')
      .setLabel('üîô Quay L·∫°i')
      .setStyle(ButtonStyle.Secondary);

    const selectRow = new ActionRowBuilder().addComponents(qtySelect);
    const backRow = new ActionRowBuilder().addComponents(backButton);

    await interaction.update({ embeds: [embed], components: [selectRow, backRow] });
  },

  // T√≠nh s·ªë l∆∞·ª£ng t·ªëi ƒëa c√≥ th·ªÉ ch·∫ø t·∫°o
  getMaxCraftable(player, weapon) {
    let maxCraft = Infinity;
    for (const [materialId, reqQty] of Object.entries(weapon.crafting || {})) {
      const have = player.inventory.items.find(i => i.id === materialId)?.quantity || 0;
      const possible = Math.floor(have / reqQty);
      if (possible < maxCraft) maxCraft = possible;
    }
    if (!isFinite(maxCraft)) return 0;
    return Math.max(0, maxCraft);
  }
};