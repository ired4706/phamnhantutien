const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const playerManager = require('../systems/player.js');

module.exports = {
  name: 'wallet',
  aliases: ['w', 'vi', 'tien', 'linhthach'],
  description: 'Xem v√≠ linh th·∫°ch v√† t√†i s·∫£n',

  // T·∫°o separator ƒë·∫πp m·∫Øt
  createSeparator() {
    return '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ';
  },

  // Format linh th·∫°ch v·ªõi emoji v√† m√†u s·∫Øc
  formatSpiritStones(spiritStones) {
    // X·ª≠ l√Ω d·ªØ li·ªáu b·ªã l·ªói
    if (!spiritStones) {
      return '0 h·∫° ph·∫©m';
    }

    // N·∫øu l√† string b·ªã l·ªói nh∆∞ "[object Object]903"
    if (typeof spiritStones === 'string') {
      const match = spiritStones.match(/(\d+)$/);
      if (match) {
        const amount = parseInt(match[1]);
        return `${amount.toLocaleString()} h·∫° ph·∫©m (d·ªØ li·ªáu c≈©)`;
      }
      return '0 h·∫° ph·∫©m (d·ªØ li·ªáu l·ªói)';
    }

    // N·∫øu l√† number (d·ªØ li·ªáu c≈©)
    if (typeof spiritStones === 'number') {
      return `${spiritStones.toLocaleString()} h·∫° ph·∫©m (d·ªØ li·ªáu c≈©)`;
    }

    // N·∫øu l√† object h·ª£p l·ªá
    if (typeof spiritStones === 'object' && spiritStones.ha_pham !== undefined) {
      const parts = [];
      if (spiritStones.cuc_pham > 0) parts.push(`üíé${spiritStones.cuc_pham}`);
      if (spiritStones.thuong_pham > 0) parts.push(`üîÆ${spiritStones.thuong_pham}`);
      if (spiritStones.trung_pham > 0) parts.push(`‚ú®${spiritStones.trung_pham}`);
      if (spiritStones.ha_pham > 0) parts.push(`ü™ô${spiritStones.ha_pham}`);

      if (parts.length === 0) {
        return '0 h·∫° ph·∫©m';
      }

      return parts.join(' ');
    }

    // Fallback
    return '0 h·∫° ph·∫©m (d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá)';
  },

  // T√≠nh t·ªïng gi√° tr·ªã quy ƒë·ªïi v·ªÅ h·∫° ph·∫©m
  calculateTotalValue(spiritStones) {
    // X·ª≠ l√Ω d·ªØ li·ªáu b·ªã l·ªói
    if (!spiritStones) {
      return 0;
    }

    // N·∫øu l√† string b·ªã l·ªói nh∆∞ "[object Object]903"
    if (typeof spiritStones === 'string') {
      const match = spiritStones.match(/(\d+)$/);
      if (match) {
        return parseInt(match[1]);
      }
      return 0;
    }

    // N·∫øu l√† number (d·ªØ li·ªáu c≈©)
    if (typeof spiritStones === 'number') {
      return spiritStones;
    }

    // N·∫øu l√† object h·ª£p l·ªá
    if (typeof spiritStones === 'object' && spiritStones.ha_pham !== undefined) {
      return (spiritStones.cuc_pham * 1000000) +
        (spiritStones.thuong_pham * 10000) +
        (spiritStones.trung_pham * 100) +
        spiritStones.ha_pham;
    }

    // Fallback
    return 0;
  },

  // Format t·ªïng gi√° tr·ªã
  formatTotalValue(totalValue) {
    if (totalValue >= 1000000) {
      return `${(totalValue / 1000000).toFixed(2)}M h·∫° ph·∫©m`;
    } else if (totalValue >= 1000) {
      return `${(totalValue / 1000).toFixed(2)}K h·∫° ph·∫©m`;
    } else {
      return `${totalValue.toLocaleString()} h·∫° ph·∫©m`;
    }
  },

  // T·∫°o progress bar cho t·ªïng t√†i s·∫£n
  createWealthBar(totalValue) {
    // Ph√¢n lo·∫°i theo m·ª©c ƒë·ªô gi√†u c√≥
    let wealthLevel, wealthColor, wealthEmoji;

    if (totalValue >= 10000000) {
      wealthLevel = 'C·ª±c K·ª≥ Gi√†u C√≥';
      wealthColor = '#FFD700'; // V√†ng
      wealthEmoji = 'üëë';
    } else if (totalValue >= 1000000) {
      wealthLevel = 'R·∫•t Gi√†u C√≥';
      wealthColor = '#FF4500'; // Cam ƒë·ªè
      wealthEmoji = 'üí∞';
    } else if (totalValue >= 100000) {
      wealthLevel = 'Gi√†u C√≥';
      wealthColor = '#32CD32'; // Xanh l√°
      wealthEmoji = 'üíµ';
    } else if (totalValue >= 10000) {
      wealthLevel = 'Kh√° Gi√†u';
      wealthColor = '#4169E1'; // Xanh d∆∞∆°ng
      wealthEmoji = 'üí≥';
    } else if (totalValue >= 1000) {
      wealthLevel = 'T·∫°m ƒê·ªß';
      wealthColor = '#9370DB'; // T√≠m
      wealthEmoji = 'üí∏';
    } else {
      wealthLevel = 'Ngh√®o';
      wealthColor = '#808080'; // X√°m
      wealthEmoji = 'ü™ô';
    }

    return { level: wealthLevel, color: wealthColor, emoji: wealthEmoji };
  },

  // Hi·ªÉn th·ªã t·ª∑ l·ªá quy ƒë·ªïi
  async showExchangeRates(interaction) {
    const exchangeEmbed = new EmbedBuilder()
      .setColor('#4169E1')
      .setTitle('üîÑ **T·ª∑ L·ªá Quy ƒê·ªïi Linh Th·∫°ch**')
      .setDescription(`${this.createSeparator()}\n**H·ªá th·ªëng quy ƒë·ªïi gi·ªØa c√°c b·∫≠c linh th·∫°ch**`)
      .addFields(
        {
          name: 'üíé **C·ª±c Ph·∫©m**',
          value: '**1 C·ª±c Ph·∫©m** = 100 Th∆∞·ª£ng Ph·∫©m\n**1 C·ª±c Ph·∫©m** = 10,000 Trung Ph·∫©m\n**1 C·ª±c Ph·∫©m** = 1,000,000 H·∫° Ph·∫©m',
          inline: true
        },
        {
          name: 'üîÆ **Th∆∞·ª£ng Ph·∫©m**',
          value: '**1 Th∆∞·ª£ng Ph·∫©m** = 100 Trung Ph·∫©m\n**1 Th∆∞·ª£ng Ph·∫©m** = 10,000 H·∫° Ph·∫©m',
          inline: true
        },
        {
          name: '‚ú® **Trung Ph·∫©m**',
          value: '**1 Trung Ph·∫©m** = 100 H·∫° Ph·∫©m',
          inline: true
        },
        {
          name: 'ü™ô **H·∫° Ph·∫©m**',
          value: '**1 H·∫° Ph·∫©m** = 1 H·∫° Ph·∫©m\n*ƒê∆°n v·ªã c∆° b·∫£n nh·∫•t*',
          inline: true
        },
        {
          name: 'üí° **G·ª£i √ù S·ª≠ D·ª•ng**',
          value: '‚Ä¢ **H·∫° Ph·∫©m**: Giao d·ªãch h√†ng ng√†y\n‚Ä¢ **Trung Ph·∫©m**: Mua v·∫≠t ph·∫©m trung c·∫•p\n‚Ä¢ **Th∆∞·ª£ng Ph·∫©m**: Mua v·∫≠t ph·∫©m cao c·∫•p\n‚Ä¢ **C·ª±c Ph·∫©m**: Giao d·ªãch l·ªõn, ƒë·ªôt ph√°',
          inline: false
        }
      )
      .setFooter({ text: 'S·ª≠ d·ª•ng fhelp ƒë·ªÉ xem t·∫•t c·∫£ l·ªánh' })
      .setTimestamp();

    await interaction.reply({ embeds: [exchangeEmbed], ephemeral: true });
  },

  async execute(interaction, args) {
    const userId = interaction.user.id;
    const username = interaction.user.username;

    // Ki·ªÉm tra xem user ƒë√£ b·∫Øt ƒë·∫ßu game ch∆∞a
    if (!playerManager.hasStartedGame(userId)) {
      const notStartedEmbed = new EmbedBuilder()
        .setColor('#FF0000')
        .setTitle('‚ùå **Ch∆∞a B·∫Øt ƒê·∫ßu Tu Ti√™n**')
        .setDescription('B·∫°n c·∫ßn s·ª≠ d·ª•ng `fstart` ƒë·ªÉ b·∫Øt ƒë·∫ßu tu ti√™n tr∆∞·ªõc!')
        .setFooter({ text: 'S·ª≠ d·ª•ng fhelp ƒë·ªÉ xem t·∫•t c·∫£ l·ªánh' });

      await interaction.reply({ embeds: [notStartedEmbed] });
      return;
    }

    // L·∫•y th√¥ng tin player
    const player = playerManager.getPlayer(userId);
    const spiritStones = player.inventory.spiritStones;
    const totalValue = this.calculateTotalValue(spiritStones);
    const wealthInfo = this.createWealthBar(totalValue);

    // T·∫°o embed ch√≠nh
    const walletEmbed = new EmbedBuilder()
      .setColor(wealthInfo.color)
      .setTitle(`${wealthInfo.emoji} **V√≠ Linh Th·∫°ch - ${username}**`)
      .setThumbnail(interaction.user.displayAvatarURL())
      .setDescription(`${this.createSeparator()}\n**T√†i s·∫£n linh th·∫°ch hi·ªán t·∫°i**`);

    // Th√¥ng tin t·ªïng quan
    walletEmbed.addFields({
      name: 'üíé **T·ªïng T√†i S·∫£n**',
      value: `**${this.formatTotalValue(totalValue)}**\n${wealthInfo.emoji} **${wealthInfo.level}**`,
      inline: false
    });

    // Chi ti·∫øt t·ª´ng lo·∫°i linh th·∫°ch
    if (typeof spiritStones === 'object' && spiritStones.ha_pham !== undefined) {
      const stoneDetails = [];

      if (spiritStones.cuc_pham > 0) {
        stoneDetails.push(`üíé **C·ª±c Ph·∫©m**: ${spiritStones.cuc_pham.toLocaleString()} (${(spiritStones.cuc_pham * 100).toLocaleString()} Th∆∞·ª£ng Ph·∫©m)`);
      }
      if (spiritStones.thuong_pham > 0) {
        stoneDetails.push(`üîÆ **Th∆∞·ª£ng Ph·∫©m**: ${spiritStones.thuong_pham.toLocaleString()} (${(spiritStones.thuong_pham * 100).toLocaleString()} Trung Ph·∫©m)`);
      }
      if (spiritStones.trung_pham > 0) {
        stoneDetails.push(`‚ú® **Trung Ph·∫©m**: ${spiritStones.trung_pham.toLocaleString()} (${(spiritStones.trung_pham * 100).toLocaleString()} H·∫° Ph·∫©m)`);
      }
      if (spiritStones.ha_pham > 0) {
        stoneDetails.push(`ü™ô **H·∫° Ph·∫©m**: ${spiritStones.ha_pham.toLocaleString()}`);
      }

      if (stoneDetails.length > 0) {
        walletEmbed.addFields({
          name: 'üìä **Chi Ti·∫øt Linh Th·∫°ch**',
          value: stoneDetails.join('\n'),
          inline: false
        });
      }
    } else {
      // Hi·ªÉn th·ªã th√¥ng tin d·ªØ li·ªáu c≈©
      let oldDataInfo = '';
      if (typeof spiritStones === 'string') {
        const match = spiritStones.match(/(\d+)$/);
        if (match) {
          oldDataInfo = `ü™ô **H·∫° Ph·∫©m (d·ªØ li·ªáu c≈©)**: ${parseInt(match[1]).toLocaleString()}`;
        } else {
          oldDataInfo = '‚ùå **D·ªØ li·ªáu linh th·∫°ch b·ªã l·ªói**';
        }
      } else if (typeof spiritStones === 'number') {
        oldDataInfo = `ü™ô **H·∫° Ph·∫©m (d·ªØ li·ªáu c≈©)**: ${spiritStones.toLocaleString()}`;
      } else {
        oldDataInfo = '‚ùå **D·ªØ li·ªáu linh th·∫°ch kh√¥ng h·ª£p l·ªá**';
      }

      walletEmbed.addFields({
        name: '‚ö†Ô∏è **D·ªØ Li·ªáu C≈©**',
        value: oldDataInfo,
        inline: false
      });
    }

    // G·ª£i √Ω ki·∫øm ti·ªÅn
    walletEmbed.addFields({
      name: 'üí° **C√°ch Ki·∫øm Linh Th·∫°ch**',
      value: '‚Ä¢ **fhunt** - SƒÉn qu√°i v·∫≠t\n‚Ä¢ **fmine** - Khai th√°c m·ªè\n‚Ä¢ **fdaily** - Nhi·ªám v·ª• h√†ng ng√†y\n‚Ä¢ **fweekly** - Nhi·ªám v·ª• h√†ng tu·∫ßn\n‚Ä¢ **fchallenge** - Th√°ch ƒë·∫•u tu sƒ© kh√°c',
      inline: false
    });

    // Footer
    walletEmbed.setFooter({
      text: `C·∫≠p nh·∫≠t l·∫ßn cu·ªëi: ${new Date().toLocaleString('vi-VN')} ‚Ä¢ S·ª≠ d·ª•ng fhelp ƒë·ªÉ xem t·∫•t c·∫£ l·ªánh`
    });
    walletEmbed.setTimestamp();

    // T·∫°o buttons
    const exchangeButton = new ButtonBuilder()
      .setCustomId('show_exchange_rates')
      .setLabel('üîÑ T·ª∑ L·ªá Quy ƒê·ªïi')
      .setStyle(ButtonStyle.Primary)
      .setEmoji('üí±');

    const row = new ActionRowBuilder().addComponents(exchangeButton);

    // G·ª≠i message v·ªõi button
    await interaction.reply({
      embeds: [walletEmbed],
      components: [row]
    });

    // T·∫°o collector ƒë·ªÉ l·∫Øng nghe button click
    try {
      const filter = i => i.customId === 'show_exchange_rates' && i.user.id === userId;
      const collector = interaction.channel.createMessageComponentCollector({
        filter,
        time: 300000 // 5 ph√∫t
      });

      collector.on('collect', async (buttonInteraction) => {
        try {
          if (buttonInteraction.customId === 'show_exchange_rates') {
            await this.showExchangeRates(buttonInteraction);
          }
        } catch (error) {
          console.error('Error in button handler:', error);
          await buttonInteraction.followUp({
            content: '‚ùå C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu!',
            ephemeral: true
          });
        }
      });

      collector.on('end', () => {
        console.log('Wallet button collector ended');
      });
    } catch (error) {
      console.error('Error setting up collector:', error);
    }
  }
}; 