const { EmbedBuilder } = require('discord.js');
const playerManager = require('../systems/player.js');
const expCalculator = require('../systems/exp-calculator.js');

module.exports = {
  name: 'daily',
  aliases: ['d', 'nhiemvungay', 'dailyquest'],
  description: 'Nh·∫≠n v√† ho√†n th√†nh nhi·ªám v·ª• h√†ng ng√†y ƒë·ªÉ nh·∫≠n ph·∫ßn th∆∞·ªüng l·ªõn',
  cooldown: 86400000, // 1 ng√†y = 86400000ms

  async execute(interaction, args) {
    const userId = interaction.user.id;
    const username = interaction.user.username;

    // Ki·ªÉm tra xem user ƒë√£ b·∫Øt ƒë·∫ßu game ch∆∞a
    if (!playerManager.hasStartedGame(userId)) {
      const notStartedEmbed = playerManager.createNotStartedEmbed();
      await interaction.reply({ embeds: [notStartedEmbed] });
      return;
    }

    const player = playerManager.getPlayer(userId);
    const now = Date.now();

    // Ki·ªÉm tra cooldown h√†ng ng√†y
    if (player.cultivation && player.cultivation.lastDailyQuest &&
      (now - player.cultivation.lastDailyQuest) < this.cooldown) {
      const remainingTime = this.cooldown - (now - player.cultivation.lastDailyQuest);
      const remainingHours = Math.ceil(remainingTime / 3600000);

      const cooldownEmbed = new EmbedBuilder()
        .setColor('#FF6B6B')
        .setTitle('‚è∞ ƒêang trong th·ªùi gian h·ªìi ph·ª•c!')
        .setDescription('B·∫°n c·∫ßn ngh·ªâ ng∆°i ƒë·ªÉ ti·∫øp t·ª•c nh·∫≠n nhi·ªám v·ª• h√†ng ng√†y.')
        .addFields({
          name: '‚è≥ Th·ªùi gian c√≤n l·∫°i',
          value: `**${remainingHours} gi·ªù**`,
          inline: true
        })
        .setFooter({ text: 'Nhi·ªám v·ª• h√†ng ng√†y c√≥ th·ªÉ nh·∫≠n sau 24 gi·ªù' })
        .setTimestamp();

      await interaction.reply({ embeds: [cooldownEmbed] });
      return;
    }

    // T√≠nh to√°n EXP theo h·ªá th·ªëng m·ªõi
    const expResult = expCalculator.calculateDailyExp(player, 'none');
    const expGained = expResult.finalExp;

    // T√≠nh to√°n ph·∫ßn th∆∞·ªüng kh√°c
    const spiritStones = 100 + Math.floor(Math.random() * 200);
    const reputationGain = 15 + Math.floor(Math.random() * 25);

    // C·∫≠p nh·∫≠t player
    playerManager.addExperience(userId, expGained);
    player.inventory.spiritStones += spiritStones;

    // C·∫≠p nh·∫≠t th·ªùi gian nhi·ªám v·ª• h√†ng ng√†y cu·ªëi v√† danh ti·∫øng
    playerManager.updatePlayer(userId, {
      'cultivation.lastDailyQuest': now,
      'inventory.spiritStones': player.inventory.spiritStones,
      'stats.reputation': (player.stats.reputation || 0) + reputationGain
    });

    // T·∫°o embed th√¥ng b√°o th√†nh c√¥ng
    const successEmbed = new EmbedBuilder()
      .setColor('#00FF00')
      .setTitle('üìú Ho√†n th√†nh nhi·ªám v·ª• h√†ng ng√†y th√†nh c√¥ng!')
      .setDescription(`**${username}** ƒë√£ ho√†n th√†nh nhi·ªám v·ª• h√†ng ng√†y quan tr·ªçng.`)
      .addFields(
        {
          name: 'üìä Kinh nghi·ªám nh·∫≠n ƒë∆∞·ª£c',
          value: `**+${expGained} EXP**`,
          inline: true
        },
        {
          name: 'üíé Linh th·∫°ch thu ƒë∆∞·ª£c',
          value: `**+${spiritStones}**`,
          inline: true
        },
        {
          name: '‚≠ê Danh ti·∫øng tƒÉng',
          value: `**+${reputationGain}**`,
          inline: true
        }
      )
      .addFields({
        name: 'üîç Chi ti·∫øt t√≠nh to√°n EXP',
        value: expResult.breakdown.calculation,
        inline: false
      })
      .setFooter({ text: 'Nhi·ªám v·ª• h√†ng ng√†y c√≥ th·ªÉ nh·∫≠n sau 24 gi·ªù' })
      .setTimestamp();

    await interaction.reply({ embeds: [successEmbed] });
  },
}; 