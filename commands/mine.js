const { EmbedBuilder } = require('discord.js');
const playerManager = require('../systems/player.js');
const cooldownManager = require('../utils/cooldown.js');
const expCalculator = require('../systems/exp-calculator.js');
const SpiritStonesCalculator = require('../utils/spirit-stones-calculator.js');

module.exports = {
  name: 'mine',
  aliases: ['mi', 'dao', 'mining'],
  description: 'Khai th√°c kho√°ng s·∫£n ƒë·ªÉ l·∫•y t√†i nguy√™n (kh√¥ng c√≥ Linh kh√≠)',
  cooldown: 3600000, // 1h = 3600000ms

  async execute(interaction, args) {
    const userId = interaction.user.id;
    const username = interaction.user.username;

    // Ki·ªÉm tra xem user ƒë√£ b·∫Øt ƒë·∫ßu game ch∆∞a
    if (!playerManager.hasStartedGame(userId)) {
      const notStartedEmbed = playerManager.createNotStartedEmbed();
      await interaction.reply({ embeds: [notStartedEmbed] });
      return;
    }

    const player = playerManager.getPlayer(userId);
    const now = Date.now();

    // Ki·ªÉm tra cooldown s·ª≠ d·ª•ng common manager
    const cooldownCheck = cooldownManager.checkCooldown(player, 'mine', this.cooldown);
    if (cooldownCheck.isOnCooldown) {
      const cooldownEmbed = cooldownManager.createCooldownEmbed('mine', cooldownCheck.remainingText);
      await interaction.reply({ embeds: [cooldownEmbed] });
      return;
    }

    // T√≠nh to√°n Linh kh√≠ theo h·ªá th·ªëng m·ªõi (mine = 0 Linh kh√≠)
    const expResult = expCalculator.calculateMineExp(player, 'none');
    const expGained = expResult.finalExp; // S·∫Ω lu√¥n = 0

    // T√≠nh to√°n ph·∫ßn th∆∞·ªüng kh√°c
    const spiritStones = SpiritStonesCalculator.calculateMine();
    const minerals = this.getMineralsByRealm(player.realm, player.realmLevel);

    // C·∫≠p nh·∫≠t player
    playerManager.addExperience(userId, expGained);

    // C·∫≠p nh·∫≠t linh th·∫°ch theo format m·ªõi
    SpiritStonesCalculator.updatePlayerSpiritStones(player, spiritStones);

    // C·∫≠p nh·∫≠t th·ªùi gian command cu·ªëi
    const lastCommandField = cooldownManager.getLastCommandField('mine');
    const updateData = {
      [lastCommandField]: now,
      ...SpiritStonesCalculator.createUpdateObject(spiritStones)
    };
    playerManager.updatePlayer(userId, updateData);

    // T·∫°o embed th√¥ng b√°o th√†nh c√¥ng
    const successEmbed = new EmbedBuilder()
      .setColor('#8B4513')
      .setTitle('‚õèÔ∏è Khai th√°c kho√°ng s·∫£n th√†nh c√¥ng!')
      .setDescription(`**${username}** ƒë√£ ho√†n th√†nh bu·ªïi khai th√°c.`)
      .addFields(
        {
          name: 'üìä Linh kh√≠ nh·∫≠n ƒë∆∞·ª£c',
          value: `**+${expGained} Linh kh√≠** (Khai th√°c kh√¥ng c√≥ Linh kh√≠)`,
          inline: true
        },
        {
          name: 'üíé Linh th·∫°ch thu ƒë∆∞·ª£c',
          value: SpiritStonesCalculator.formatSpiritStones(spiritStones),
          inline: true
        },
        {
          name: 'üåø Kho√°ng s·∫£n thu ƒë∆∞·ª£c',
          value: `${minerals.length} items: ${minerals.join(', ')}`,
          inline: true
        }
      )
      .addFields({
        name: 'üîç Chi ti·∫øt t√≠nh to√°n Linh kh√≠',
        value: expResult.breakdown.calculation,
        inline: false
      })
      .setFooter({ text: `Khai th√°c c√≥ th·ªÉ th·ª±c hi·ªán sau 1 gi·ªù ‚Ä¢ Tu vi ${player.realm} nh·∫≠n ${minerals.length} kho√°ng s·∫£n` })
      .setTimestamp();

    await interaction.reply({ embeds: [successEmbed] });
  },

  /**
   * L·∫•y kho√°ng s·∫£n t·ª´ khai th√°c d·ª±a tr√™n tu vi
   * @param {string} realm - Tu vi hi·ªán t·∫°i
   * @param {number} realmLevel - C·∫•p ƒë·ªô tu vi
   * @returns {Array} Danh s√°ch kho√°ng s·∫£n
   */
  getMineralsByRealm(realm, realmLevel) {
    // T·ªâ l·ªá drop theo tu vi (d·ª±a tr√™n b·∫£ng b·∫°n cung c·∫•p)
    const dropRates = this.getDropRatesByRealm(realm, realmLevel);

    // L·∫•y danh s√°ch kho√°ng s·∫£n theo rarity
    const mineralsByRarity = this.getMineralsByRarity();

    // S·ªë l∆∞·ª£ng item theo tu vi
    const itemCountByRealm = {
      'luyen_khi': { min: 3, max: 5 },    // Luy·ªán Kh√≠: 3-5 item
      'truc_co': { min: 4, max: 6 },      // Tr√∫c C∆°: 4-6 item
      'ket_dan': { min: 5, max: 7 },      // K·∫øt ƒêan: 5-7 item
      'nguyen_anh': { min: 6, max: 8 }    // Nguy√™n Anh: 6-8 item
    };

    const realmConfig = itemCountByRealm[realm] || itemCountByRealm['luyen_khi'];
    const count = Math.floor(Math.random() * (realmConfig.max - realmConfig.min + 1)) + realmConfig.min;

    const selectedMinerals = [];

    for (let i = 0; i < count; i++) {
      const rarity = this.selectRarityByDropRate(dropRates);
      const minerals = mineralsByRarity[rarity];

      if (minerals && minerals.length > 0) {
        const randomMineral = minerals[Math.floor(Math.random() * minerals.length)];
        if (!selectedMinerals.includes(randomMineral)) {
          selectedMinerals.push(randomMineral);
        }
      }
    }

    return selectedMinerals;
  },

  /**
   * L·∫•y t·ªâ l·ªá drop theo tu vi
   * @param {string} realm - Tu vi hi·ªán t·∫°i
   * @param {number} realmLevel - C·∫•p ƒë·ªô tu vi
   * @returns {Object} T·ªâ l·ªá drop cho m·ªói rarity
   */
  getDropRatesByRealm(realm, realmLevel) {
    // B·∫£ng t·ªâ l·ªá drop theo tu vi
    const realmDropRates = {
      'luyen_khi': {
        common: 80,    // Ph√†m c·∫•p: 80%
        uncommon: 20,  // Huy·ªÅn c·∫•p: 20%
        rare: 0,       // ƒê·ªãa c·∫•p: 0%
        epic: 0,       // Thi√™n c·∫•p: 0%
        legendary: 0   // Th·∫ßn c·∫•p: 0%
      },
      'truc_co': {
        common: 55,    // Ph√†m c·∫•p: 55%
        uncommon: 35,  // Huy·ªÅn c·∫•p: 35%
        rare: 10,      // ƒê·ªãa c·∫•p: 10%
        epic: 0,       // Thi√™n c·∫•p: 0%
        legendary: 0   // Th·∫ßn c·∫•p: 0%
      },
      'ket_dan': {
        common: 35,    // Ph√†m c·∫•p: 35%
        uncommon: 35,  // Huy·ªÅn c·∫•p: 35%
        rare: 25,      // ƒê·ªãa c·∫•p: 25%
        epic: 5,       // Thi√™n c·∫•p: 5%
        legendary: 0   // Th·∫ßn c·∫•p: 0%
      },
      'nguyen_anh': {
        common: 20,    // Ph√†m c·∫•p: 20%
        uncommon: 30,  // Huy·ªÅn c·∫•p: 30%
        rare: 35,      // ƒê·ªãa c·∫•p: 35%
        epic: 14,      // Thi√™n c·∫•p: 14%
        legendary: 1   // Th·∫ßn c·∫•p: 1%
      }
    };

    return realmDropRates[realm] || realmDropRates['luyen_khi'];
  },

  /**
   * Ch·ªçn rarity d·ª±a tr√™n t·ªâ l·ªá drop
   * @param {Object} dropRates - T·ªâ l·ªá drop cho m·ªói rarity
   * @returns {string} Rarity ƒë∆∞·ª£c ch·ªçn
   */
  selectRarityByDropRate(dropRates) {
    const random = Math.random() * 100;
    let cumulative = 0;

    for (const [rarity, rate] of Object.entries(dropRates)) {
      cumulative += rate;
      if (random <= cumulative) {
        return rarity;
      }
    }

    // Fallback v·ªÅ common n·∫øu c√≥ l·ªói
    return 'common';
  },

  /**
   * L·∫•y danh s√°ch kho√°ng s·∫£n theo rarity
   * @returns {Object} Danh s√°ch kho√°ng s·∫£n theo rarity
   */
  getMineralsByRarity() {
    return {
      common: [
        'ü™® Thi·∫øt Tinh Th√¥', 'ü™® Kim Thi·∫øt Th∆∞·ªùng', 'ü™® Thanh M·ªôc Tinh',
        'üíé Th·ªßy Tinh Th·∫°ch', 'üî• H·ªèa Th·∫°ch Nhi·ªát T√¢m', 'üü° Ho√†ng Th·ªï K·∫øt'
      ],
      uncommon: [
        'üü† ƒê·ªìng Tinh Luy·ªán', 'üíé Ng·ªçc Th·∫°ch Thanh Khi·∫øt', 'ü©∏ Huy·∫øt Vi√™m T·ªßy K·∫øt',
        'üõ°Ô∏è H·ªô Linh T√¢m K·∫øt', 'üëª H∆∞ ·∫¢nh Linh K·∫øt', 'üü† Kim Thi·∫øt Tinh',
        'üü¢ Thanh M·ªôc Linh', 'üíé Th·ªßy Tinh Huy·ªÅn', 'üî• H·ªèa Th·∫°ch Linh T√¢m',
        'üü° Ho√†ng Th·ªï T√¢m K·∫øt'
      ],
      rare: [
        'üü£ Huy·ªÅn Tinh ƒê·ªãa T√¢m', '‚ùÑÔ∏è Lam Th·∫°ch BƒÉng T√¢m', 'üí´ Tinh H·ªìn Th·∫°ch',
        'üî¥ H·ªìng Ng·ªçc ƒê·ªãa', 'üü¢ L·ª•c Ng·ªçc ƒê·ªãa', 'üü° Ho√†ng Th·∫°ch ƒê·ªãa',
        'üîµ Lam Th·∫°ch ƒê·ªãa', '‚ö° Tinh T·ªëc Th·∫°ch ƒê·ªãa', '‚ö´ H·∫Øc Th·∫°ch ƒê·ªãa',
        'üîÆ Tr·∫≠n VƒÉn Th·∫°ch', 'üü† Huy·ªÅn Kim Thi·∫øt', 'üü¢ Huy·ªÅn Thanh M·ªôc',
        'üíé Huy·ªÅn Th·ªßy Tinh', 'üî• Huy·ªÅn H·ªèa Th·∫°ch', 'üü° Huy·ªÅn Ho√†ng Th·ªï',
        '‚ö´ Huy·ªÅn Thi·∫øt Tinh Ph√°ch', 'üü¢ Ng·ªçc M·ªôc Linh T·ªßy', 'üîµ Lam Th·ªßy Minh Ch√¢u',
        'üî¥ X√≠ch Vi√™m T√¢m H·ªèa', 'üü° Huy·ªÅn Th·ªï Linh K·∫øt'
      ],
      epic: [
        '‚ú® Ng√¢n Tinh Thi√™n Kh√¥i', 'ü©∏ Huy·∫øt Th·∫°ch Thi√™n T√¢m', 'üíé Huy·∫øt Ch√¢u Linh',
        'üî¥ H·ªìng Ng·ªçc Th√°nh', 'üü¢ L·ª•c Ng·ªçc Th√°nh', 'üü° Ho√†ng Th·∫°ch Th√°nh',
        'üîµ Lam Th·∫°ch Th√°nh', '‚ö° Tinh T·ªëc Th·∫°ch Th√°nh', '‚ö´ H·∫Øc Th·∫°ch Th√°nh',
        '‚òÅÔ∏è Tinh V√¢n Th·∫°ch', 'üü† Th√°nh Kim Thi·∫øt', 'üü¢ Th√°nh Thanh M·ªôc',
        'üíé Th√°nh Th·ªßy Tinh', 'üî• Th√°nh H·ªèa Th·∫°ch', 'üü° Th√°nh Ho√†ng Th·ªï'
      ],
      legendary: [
        'üåü Thi√™n Tinh Th·∫ßn Kh√≠', 'üíé Th·∫ßn Ng·ªçc T·ªãnh T√¢m', 'üåå H·ªón Th·∫°ch Nguy√™n',
        'üíé Ng·ªçc Th√°nh H·ªìn', 'üî¥ H·ªìng Ng·ªçc Th·∫ßn', 'üü¢ L·ª•c Ng·ªçc Th·∫ßn',
        'üü° Ho√†ng Th·∫°ch Th·∫ßn', 'üîµ Lam Th·∫°ch Th·∫ßn', '‚ö° Tinh T·ªëc Th·∫°ch Th·∫ßn',
        '‚ö´ H·∫Øc Th·∫°ch Th·∫ßn', 'üíé Th·∫ßn Ng·ªçc T√¢m', 'üü† Th·∫ßn Kim Thi·∫øt',
        'üü¢ Th·∫ßn Thanh M·ªôc', 'üíé Th·∫ßn Th·ªßy Tinh', 'üî• Th·∫ßn H·ªèa Th·∫°ch',
        'üü° Th·∫ßn Ho√†ng Th·ªï', 'üü† Th·∫ßn Kim Th√°nh Thi·∫øt', 'üü¢ Ti√™n M·ªôc Th√°nh T·ªßy',
        'üíé Th·∫ßn Th·ªßy Tinh Ng·ªçc', 'üî• Th√°nh Vi√™m Ch√¢n H·ªèa', 'üü° Th·∫ßn Th·ªï Ch√≠ Tinh'
      ]
    };
  }
};
